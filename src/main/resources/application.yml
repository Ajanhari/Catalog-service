#Port binding—Unlike traditional applications that depend on an external server being available in the execution environment, cloud native applications are self-contained and export their
# services by binding to a port that can be configured depending on the environment.
server:
  port: 8081
  tomcat:
    keep-alive-timeout: 15s #how long to keep a connection open while waiting for new HTTP requests.
    connection-timeout: 2s #defines a limit for how much time Tomcat should wait between accepting a TCP connection from a client and actually receiving the HTTP request
    threads:
      max: 50     #configure the maximum number of request processing threads
      min-spare: 5 #the minimum number of threads that should always be kept running

polar:
  greeting: Welcome to the local book catalog!

spring:
  application:
    name: catalog-service
  datasource:
    username: user
    password: password
    url: jdbc:postgresql://localhost:5432/polardb_catalog #Opening and closing database connections are relatively expensive operations, so you don’t want to do that every time your application accesses data. The solution is connection pooling: the application establishes several connections with the database and reuses them, rather than creating new ones for each data access operation. This is a considerable performance optimization.
    hikari:
      connection-timeout: 2000 # The maximum time (ms) to spend waiting to get a connection from the pool
      maximum-pool-size: 5 # The maximum number of connections HikariCP will keep in the pool
      pool-name: local-postgres
  #sql.init.mode: always
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-read-timeout: 5000 # Timeout on waiting to read configuration data from the config server (ms)
      request-connect-timeout: 5000 # Timeout on waiting to connect to the config server (ms)
      fail-fast: false # Makes a failure to connect to the config server fatal
      retry:
        max-attempts: 6 # Maximum number of attempts
        initial-interval: 1000 #  Initial retry interval for backoff (ms)
        max-interval: 2000 # Maximum retry interval for backoff (ms)
        multiplier: 1.1 # Multiplier to compute the next interval

management:
  endpoints:
    web:
      exposure:
        include: refresh # Exposes the /actuator/refresh endpoint through HTTP













#Web server—A server that handles HTTP requests coming from a client and replies with HTTP responses, such as Apache HTTPD.
#Servlet container—A component, part of a web server, that provides an execution context for web applications using the Java Servlet API (like Spring MVC apps). Tomcat (Catalina) is one example.
#Application server—A server that provides a complete execution environment (like Jakarta EE) for different types of applications and supports several protocols, such as WildFly.